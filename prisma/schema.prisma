generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Crossfit {
  id             Int    @id @default(autoincrement())
  identification String @db.VarChar(13)
  name           String @db.VarChar(50)
  direction      String @db.VarChar(150)
  phone          String @db.VarChar(20)
  email          String @db.VarChar(255)

  @@map("crossfits")
}

model Plan {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  description String    @db.VarChar(255)
  price       Decimal   @db.Decimal(5, 2)
  duration    Int
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  Member      Member[]

  @@map("plans")
}

model Member {
  id               Int          @id @default(autoincrement())
  identification   String       @db.VarChar(13)
  name             String       @db.VarChar(50)
  lastname         String       @db.VarChar(50)
  email            String       @unique @db.VarChar(100)
  phone            String       @db.VarChar(20)
  emergency_phone  String       @db.VarChar(20)
  born_date        DateTime     @db.Date
  direction        String       @db.VarChar(255)
  inscription_date DateTime     @default(now())
  status           Boolean?     @default(true)
  gender           Gender
  nacionality      Nacionality
  createdAt        DateTime     @default(now()) @map("created_at")
  planId           Int          @default(1) @map("plan_id")
  updatedAt        DateTime?    @updatedAt @map("updated_at")
  Attendance       Attendance[]
  plan             Plan         @relation(fields: [planId], references: [id])
  Pay              Pay[]

  @@map("members")
}

model Attendance {
  id        Int       @id @default(autoincrement())
  date      DateTime  @db.Timestamp(6)
  status    Boolean   @default(true) @db.Boolean()
  createdAt DateTime  @default(now()) @map("created_at")
  memberId  Int       @map("member_id")
  updatedAt DateTime? @updatedAt @map("updated_at")
  Member    Member    @relation(fields: [memberId], references: [id])

  @@map("attendances")
}

model Pay {
  id           Int          @id @default(autoincrement())
  date         DateTime     @db.Date
  status       Boolean      @default(true) @db.Boolean()
  payment_type Payment_Type
  createdAt    DateTime     @default(now()) @map("created_at")
  memberId     Int          @map("member_id")
  updatedAt    DateTime?    @updatedAt @map("updated_at")
  Member       Member       @relation(fields: [memberId], references: [id])

  @@map("pays")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(50)
  email         String    @unique @db.VarChar(100)
  password      String?   @db.VarChar(255)
  status        Boolean?  @default(true)
  role          Role      @default(USER)
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verificationtokens")
}

enum Role {
  USER
  ADMIN
  TRAINER
}

enum Gender {
  M
  F
}

enum Nacionality {
  Ecuatoriano
  Extranjero
}

enum Payment_Type {
  Efectivo
  Tarjeta
  Transferencia
}

// Vistas

model MemberPaymentInfo {
  id                    Int       @id
  member_id             Int
  member_identification String
  member_name           String
  member_lastname       String
  member_email          String
  member_phone          String
  plan_id               Int
  plan_name             String
  plan_price            Decimal
  plan_duration         Int
  first_payment_date    DateTime?
  last_payment_date     DateTime?
  next_payment_date     DateTime?
  days_remaining        Int?

  @@map("member_payment_info")
}
model TotalEarnings {
  id             Int      @id
  total_earnings Decimal
  @@map("total_earnings")
}

model AnnualEarnings {
  id             Int      @id
  year           Int
  annual_earnings Decimal
  @@map("annual_earnings")
}

model MonthlyEarnings {
  id             Int      @id
  year           Int
  month          Int
  monthly_earnings Decimal
  @@map("monthly_earnings")
}

model EarningsByPlan {
  id             Int      @id
  plan_name      String
  earnings       Decimal
  @@map("earnings_by_plan")
}

model TotalAttendances {
  id             Int      @id
  total_attendances Int
  @@map("total_attendances")
}

model AttendancesByGender {
  id             Int      @id
  gender         Gender
  total_attendances Int
  @@map("attendances_by_gender")
}

model AnnualAttendances {
  id             Int      @id
  year           Int
  annual_attendances Int
  @@map("annual_attendances")
}

model MonthlyAttendances {
  id             Int      @id
  year           Int
  month          Int
  monthly_attendances Int
  @@map("monthly_attendances")
}

model DailyAttendances {
  id             Int      @id
  day            DateTime
  daily_attendances Int
  @@map("daily_attendances")
}

model TotalMemberships {
  id             Int      @id
  total_memberships Int
  @@map("total_memberships")
}

model ActiveMemberships {
  id             Int      @id
  active_memberships Int
  @@map("active_memberships")
}

model InactiveMemberships {
  id             Int      @id
  inactive_memberships Int
  @@map("inactive_memberships")
}
